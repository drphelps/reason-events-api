// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Debug = require("bs-node-debug/src/Debug.bs.js");
var Chalk = require("chalk");
var Config = require("./Config.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Plugins = require("./Plugins");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var MnstrServer = require("@ecliptic/mnstr/src/server/MnstrServer.bs.js");
var Postgraphile = require("postgraphile");

var debug = Debug.make("reason-events", "Server");

var debugExn = Debug.make("reason-events", "Server:exn");

function onListen(exn) {
  var exit = 0;
  var val;
  try {
    val = exn;
    exit = 1;
  }
  catch (raw_exn){
    var exn$1 = Js_exn.internalToOCamlException(raw_exn);
    if (exn$1[0] === Js_exn.$$Error) {
      debug("Express listen error");
      return debugExn(exn$1[1]);
    } else {
      throw exn$1;
    }
  }
  if (exit === 1) {
    console.log(Chalk.blue("reason-events") + (" is listening on port " + Chalk.green(Config.Server[/* port */0].toString())));
    return /* () */0;
  }
  
}

function main() {
  var partial_arg = /* Some */[(function ($$default) {
        return Pervasives.$at($$default, /* :: */[
                    /* Use */Block.__(0, [Postgraphile.postgraphile(Config.Database[/* url */0], "events", {
                              appendPlugins: /* array */[(function (prim) {
                                    return Plugins.stripNullsFromDefaultFields(prim);
                                  })]
                            })]),
                    /* [] */0
                  ]);
      })];
  var partial_arg$1 = MnstrServer.Http[/* make */3];
  return (function (param, param$1, param$2, param$3, param$4, param$5) {
      return partial_arg$1(partial_arg, param, param$1, param$2, param$3, param$4, param$5);
    });
}

if ((require.main === module)) {
  main(/* () */0);
}

exports.debug = debug;
exports.debugExn = debugExn;
exports.onListen = onListen;
exports.main = main;
/* debug Not a pure module */
